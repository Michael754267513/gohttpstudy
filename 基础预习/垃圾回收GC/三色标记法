3. 三色标记法

三色标记法是传统 Mark-Sweep 的一个改进，它是一个并发的 GC 算法。

原理如下，

    首先创建三个集合：白、灰、黑。
    将所有对象放入白色集合中。
    然后从根节点开始遍历所有对象（注意这里并不递归遍历），把遍历到的对象从白色集合放入灰色集合。
    之后遍历灰色集合，将灰色对象引用的对象从白色集合放入灰色集合，之后将此灰色对象放入黑色集合
    重复 4 直到灰色中无任何对象
    通过write-barrier检测对象有变化，重复以上操作
    收集所有白色对象（垃圾）

write-barrier：
写屏障

因为go支持并行GC, GC的扫描和go代码可以同时运行, 这样带来的问题是GC扫描的过程中go代码有可能改变了对象的依赖树。
例如开始扫描时发现根对象A和B, B拥有C的指针。
    GC先扫描A，A放入黑色
    B把C的指针交给A
    GC再扫描B，B放入黑色
    C在白色，会回收；但是A其实引用了C。
为了避免这个问题, go在GC的标记阶段会启用写屏障(Write Barrier).
启用了写屏障(Write Barrier)后，
    GC先扫描A，A放入黑色
    B把C的指针交给A
    由于A在黑色，所以C放入灰色
    C没有子对象，放入黑色
    扫描B，B没有子对象，放入黑色
即使A可能会在稍后丢掉C, 那么C就在下一轮回收。
开启写屏障之后，当指针发生改变, GC会认为在这一轮的扫描中这个指针是存活的, 所以放入灰色。

触发
    阈值：默认内存扩大一倍，启动gc
    定期：默认2min触发一次gc，src/runtime/proc.go:forcegcperiod
    手动：runtime.gc()


