package main

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/swaggo/files"
	"github.com/swaggo/gin-swagger"
	"gohttpstudy/gindemo/swagger_demo/docs" // docs is generated by Swag CLI, you have to import it.
)

// @contact.name swagger test
// @contact.url http://www.hzeng.com
// @contact.email 754267513@qq.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @termsOfService http://swagger.io/terms/
func main() {

	// programatically set swagger info
	docs.SwaggerInfo.Title = "Swagger Example API"
	docs.SwaggerInfo.Description = "This is a sample server Petstore server."
	docs.SwaggerInfo.Version = "1.6.7"
	docs.SwaggerInfo.Host = "127.0.0.1:8080"
	docs.SwaggerInfo.BasePath = "/"
	docs.SwaggerInfo.Schemes = []string{"http", "https"}

	r := gin.New()
	r.Use(Cors())
	// use ginSwagger middleware to serve the API docs
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	r.GET("/getdemo", Result)

	r.Run()
}

// @Summary 测试
// @Description 测试getdemo参数
// @Produce  application/json
// @Accept multipart/form-data
// @Param name query string true "name"
// @Param age query string true "age"
// @Success 200 {string} {}
// @Router /getdemo [GET]
func Get1(ctx *gin.Context) {
	Result(ctx)
}

type User struct {
	Name string `form:"name"`
	Age  int    `form:"age"`
}

type Response struct {
	Code int         `json:"code"`
	Msg  error       `json:"msg"`
	Data interface{} `json:"data"`
}

func Result(ctx *gin.Context) {
	var people User
	err := ctx.BindQuery(&people)
	if err != nil {
		ctx.JSON(500, Response{
			Code: 0,
			Msg:  err,
			Data: people,
		})
	} else {
		ctx.JSON(200, Response{
			Code: 0,
			Msg:  err,
			Data: people,
		})
	}
}

//跨域
func Cors() gin.HandlerFunc {
	return func(c *gin.Context) {
		method := c.Request.Method

		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Headers", "Content-Type,AccessToken,X-CSRF-Token, Authorization, Token")
		c.Header("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
		c.Header("Access-Control-Expose-Headers", "Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type")
		c.Header("Access-Control-Allow-Credentials", "true")

		//放行所有OPTIONS方法
		if method == "OPTIONS" {
			c.AbortWithStatus(http.StatusNoContent)
		}
		// 处理请求
		c.Next()
	}
}
